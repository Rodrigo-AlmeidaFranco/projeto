inputGenericSearch = function( pr_args )
{
  return inputGenericSearch.__constructor( pr_args );
}

inputGenericSearch.__constructor = function( pr_args )
{
  var e = document.createElement( "SPAN" );

  e._constructor = inputGenericSearch._constructor;
  e._constructor( pr_args );

  return e;
}

inputGenericSearch._constructor = function( pr_args )
{
  this.txtValue = document.createElement( "INPUT" );
  
  this.txtValue.getValue = function( )
  {	
    if( this.bLowerCase == true )
      return this.value.toLowerCase( );
    else if( this.bLowerCase == false )
      return this.value.toUpperCase( );
    
    return this.value;
  };
  
  if( !isTopWindow( ) )
  {
    this.divQuickSearch = getTopWindow( ).document.createElement( "DIV" );
    this.bInsideWindow  = true;
  }
  else
  {
    this.divQuickSearch = document.createElement( "DIV" );
    this.bInsideWindow  = false;
  }

  this.id                   = "genSearch_" + pr_args["name"];
  this.className            = "inputGenericSearch";
  this.strTxtValueClassName = "txtValue";
  this.lastSearch           = undefined;
  
  /**
   * Informa se o <i>quickSearch</i> deve ser utilizado.
   */
  this.bQuickSearch = true;
  
  /**
   * Informa o Id do Timeout Corrente do evento para mostrar o QuickSearch.
   */
  this.nQuickSearchTimeout = undefined;  
  
  /**
   * Informa se o <i>quickSearch</i> está visível.
   */
  this.isQuickSearchVisible = false;
  
  /**
   * Informa a tecla do evento corrente.
   */
  this.activeKey = undefined;
  
  /**
   * Índice do item atual selecionado no <i>QuickSearch</i>.
   */
  this.qsIndex = undefined;
  
  /**
   * Chave atual do componente.
   */
  this.keyValue    = "";
  
  /**
   * Chave anterior do componente.
   */
  this.oldKeyValue = "";

  this.txtValue._parent = this;
  this.txtValue.type    = "text";
  
  /**
   * Eventos do campo texto.
   */
  this.txtValue.onkeydown     = inputGenericSearch.txtValueOnkeydown;
  this.txtValue.onfocus       = inputGenericSearch.txtValueOnfocus;
  this.txtValue.onblur        = inputGenericSearch.txtValueOnblur;
  this.txtValue.onkeypress    = Input_KeyPress;
  this.txtValue.onpaste       = Input_Paste;
  this.txtValueProcessKeydown = inputGenericSearch.txtValueProcessKeydown;
  this.txtValue.className     = this.strTxtValueClassName;

  pr_args["parent"].appendChild( this );
  this.appendChild( this.txtValue     );

  if( this.bInsideWindow )
    getTopWindow( ).document.body.appendChild( this.divQuickSearch );
  else
    document.body.appendChild( this.divQuickSearch );
  
  createButton( "cp_inputGenericSearchButton", this.id, "...", "", "inputGenericSearchButton" );
  this.btnOpenWindow         = eval( "cp_inputGenericSearchButton" );
  this.btnOpenWindow._parent = this;
  
  /**
   * Eventos do botão de abertura da janela.
   */
  this.btnOpenWindow.onclick       = inputGenericSearch.btnOpenWindowOnclick;
  this.btnOpenWindowProcessOnclick = inputGenericSearch.btnOpenWindowProcessOnclick;

  this.getAdditionalData            = inputGenericSearch.getAdditionalData;
  this.getQuickSearchData           = inputGenericSearch.getQuickSearchData;
  this.setQuickSearchData           = inputGenericSearch.setQuickSearchData;
  this.calcQuickSearchPos           = inputGenericSearch.calcQuickSearchPos;
  this.setKeyValue                  = inputGenericSearch.setKeyValue;
  this.showQuickSearch              = inputGenericSearch.showQuickSearch;
  this.updateValue                  = inputGenericSearch.updateValue;
  this.getKeyValue                  = inputGenericSearch.getKeyValue;
  this.getValue                     = inputGenericSearch.getValue;
  this.quickSearchMouseout          = inputGenericSearch.quickSearchMouseout;
  this.quickSearchMouseover         = inputGenericSearch.quickSearchMouseover;
  this.quickSearchClick             = inputGenericSearch.quickSearchClick;
  this.getJsonValue                 = inputGenericSearch.getJsonValue;
  this.setJsonValue                 = inputGenericSearch.setJsonValue;
  this.setReadOnly                  = inputGenericSearch.setReadOnly;
  this.setMaxLength                 = inputGenericSearch.setMaxLength;
  this.processQuickSearchNavigation = inputGenericSearch.processQuickSearchNavigation;
  this.buildQuickSearchData         = inputGenericSearch.buildQuickSearchData;
  this.selectRow                    = inputGenericSearch.selectRow;
  this.unselectRow                  = inputGenericSearch.unselectRow;
  this.divQuickSearch._parent       = this;
  this.divQuickSearch.className     = "quickSearchContainer";
  this.divQuickSearch.style.display = "none";
}

/**
 * Chamado quando o botão de processamento da tela de busca é acionado.
 * @return
 */
function processGenericSearch( )
{
  var strListviewName = window.parent.g_activeGeneric.strListviewName;

  var listView = eval( "cp_" + strListviewName );
  var key      = listView.getRealKey( );

  getTopWindow( ).g_activeGeneric.updateValue( key );
  getTopWindow( ).g_activeGeneric.txtValue.focus( );

  closeDialog( );
}

inputGenericSearch.getJsonValue = function( )
{
  return "{type:" + this._type + ",keyValue:'" + this.keyValue + "',value:'" + this.txtValue.getValue( ) + "'}";
}

inputGenericSearch.setJsonValue = function( pr_json )
{
  var jsonValue;
 
  if( pr_json )
  {
    jsonValue = pr_json.setup ? pr_json.setup : pr_json;

    var keyValue;
    var value;
    var bPDConfig = true;

    if( jsonValue.readOnly != undefined )
      this.setReadOnly( jsonValue.readOnly );
    
    if( pr_json.setup && typeof jsonValue.keyValue === "undefined" && typeof jsonValue.value === "undefined" )
      return;
    
    keyValue = jsonValue.keyValue;
    value    = jsonValue.value;

    this.updateValue( keyValue, value, bPDConfig );
  }
}

inputGenericSearch.setMaxLength = function( pr_nMaxLength )
{
  if( pr_nMaxLength > 0 )
    this.txtValue.maxLength = pr_nMaxLength;
}

inputGenericSearch.setReadOnly = function( bReadOnly )
{
  this.bReadOnly = bReadOnly;

  if( this.bQuickSearchFieldEnabled )
  {
    this.txtValue.readOnly  = bReadOnly;
    this.txtValue.className = bReadOnly ? this.strTxtValueROClassName : this.strTxtValueClassName;
  }
  
  this.btnOpenWindow.setReadOnly( bReadOnly );
}

inputGenericSearch.getValue = function( pr_vKey )
{
  var strQueryString = buildQueryString( this.aSource, false );
  
  var strPrm = 'ID1=' + this.Id1 + '&ID2=' + this.getValueSvc + '&ID3=' + strQueryString + '&compName=' + this.internalName + '&key=' + pr_vKey;

  var strValue = postContent( g_strURL, strPrm );

  return strValue;
}

inputGenericSearch.getKeyValue = function( pr_strValue )
{
  var strQueryString = buildQueryString( this.aSource, false );
  
  var value = escape( pr_strValue );
	
  var strPrm = 'ID1=' + this.Id1 + '&ID2=' + this.getKeyValueSvc + '&ID3=' + strQueryString + '&compName=' + this.internalName + '&value=' + value;

  var strKeyValue = postContent( g_strURL, strPrm ); 

  return strKeyValue;
}

inputGenericSearch.quickSearchClick = function( )
{
  var genericSearch = this.parentNode.parentNode.parentNode._parent;

  var key   = this.cells[0].innerHTML;
  var value = this.cells[1].getAttribute( "text" );

  genericSearch.bQuickSearchClick = true;
  
  genericSearch.showQuickSearch( false );
  genericSearch.updateValue( key, value );
}

inputGenericSearch.selectRow = function( pr_row )
{
  $( pr_row ).addClass( "selected" );
}

inputGenericSearch.unselectRow = function( pr_row )
{
  $( pr_row ).removeClass( "selected" );
}

inputGenericSearch.quickSearchMouseover = function( )
{
  var generic = this.parentNode.parentNode.parentNode._parent;
  
  if( generic.qsIndex != undefined && generic.qsIndex > -1 )
    generic.unselectRow( generic.divQuickSearch.childNodes[0].tBodies[0].rows[generic.qsIndex] );
  
  generic.selectRow( this );
}

inputGenericSearch.quickSearchMouseout = function( )
{
  var divGenericSearch = this.parentNode.parentNode.parentNode._parent;

  divGenericSearch.unselectRow( this );
}

inputGenericSearch.updateValue = function( pr_vKey, pr_strValue, pr_bPDConfig )
{
  if( !pr_vKey && pr_strValue )
      pr_vKey = this.getKeyValue( pr_strValue );

  if( !pr_vKey )
    pr_vKey = "";
  
  if( pr_strValue )
    this.txtValue.value = pr_strValue;
  else
  {
    if( pr_vKey )
      pr_strValue = this.getValue( pr_vKey );

    if( !pr_strValue )
      pr_strValue = "";

    this.txtValue.value = pr_strValue;
  }
  
  this.setKeyValue( pr_vKey, pr_bPDConfig );

  var additionalData = this.getAdditionalData( pr_vKey );
  var json           = stringToJson( additionalData );

  var f = eval( "document.frames" );
  document.updateObjects( f, json );
}

inputGenericSearch.getAdditionalData = function( pr_vKey )
{
  var strPrm         = 'ID1=' + this.Id1 + '&ID2=' + this.additionalDataSvc + '&compName=' + this.internalName + '&key=' + pr_vKey;
  var additionalData = postContent( g_strURL, strPrm );
  
  return additionalData;
}

inputGenericSearch.setKeyValue = function( pr_vKey, pr_bPDConfig )
{
  this.oldKeyValue = this.keyValue;
  this.keyValue    = pr_vKey;

  if( this.oldKeyValue != this.keyValue && !this.bReadOnly && !pr_bPDConfig )
  {
    this.aEventListener = this.aEventListenerChange;
    fireEvent.apply( this, [] );
  }
}

inputGenericSearch.btnOpenWindowOnclick = function( pr_event )
{
  if( !pr_event )
    pr_event = event;

  try
  {
    window.parent.g_activeGeneric = this._parent;
    window.parent.g_activeGeneric.btnOpenWindowProcessOnclick( this._parent, pr_event );
  }
  catch( e )
  {
    g_activeGeneric = this._parent;
    g_activeGeneric.btnOpenWindowProcessOnclick( this._parent, pr_event );
  }
}

inputGenericSearch.btnOpenWindowProcessOnclick = function( pr_activeGeneric,  pr_event )
{
  var strQueryString = buildQueryString( pr_activeGeneric.aSource, false );
  var strHelpUrl;
  
  if( pr_activeGeneric.strHelpUrl )
    strHelpUrl = getContextURL( ) + "Doc/" + pr_activeGeneric.strHelpUrl;

  var value = escape( pr_activeGeneric.txtValue.value );

  try
  {
    parent.showForm( g_strURL,
                     pr_activeGeneric.Id1,
                     '&ID2='      + pr_activeGeneric.openWindowSvc     +
                     '&ID3='      + encodeURIComponent(strQueryString) +
                     '&compName=' + pr_activeGeneric.internalName      +
                     '&strValue=' + encodeURIComponent(value),
                     strHelpUrl );
  }
  catch( e )
  {
    showForm( g_strURL,
              pr_activeGeneric.Id1,
              '&ID2='      + pr_activeGeneric.openWindowSvc     +
              '&ID3='      + encodeURIComponent(strQueryString) +
              '&compName=' + pr_activeGeneric.internalName      +
              '&strValue=' + encodeURIComponent(value),
              strHelpUrl );
  }
}

inputGenericSearch.txtValueProcessKeydown = function( )
{
  var activeGeneric = this;
  
  //Mata o timeout
  activeGeneric.nQuickSearchTimeout = undefined;

  //Checa se esse componente ainda tem o foco
  if( document.activeElement != activeGeneric.txtValue )
    return;

  if( activeGeneric.bQuickSearch && activeGeneric.txtValue.value.length > 2 )
  {
    if( ( activeGeneric.activeKey != 13 && activeGeneric.activeKey != 27 && activeGeneric.activeKey != 38 && activeGeneric.activeKey != 40 ) ||
        activeGeneric.lastSearch  != activeGeneric.txtValue.value )
    {
      var strQuickSearchJson = activeGeneric.getQuickSearchData( activeGeneric );
      var jsonQuickSearch    = stringToJson( strQuickSearchJson );
  
      activeGeneric.setQuickSearchData( jsonQuickSearch.data  );
    }
    
    activeGeneric.showQuickSearch( activeGeneric.divQuickSearch.childNodes[0].rows.length > 0 );

    if( activeGeneric.divQuickSearch.childNodes[0].rows.length > 0 )
      activeGeneric.processQuickSearchNavigation( );
  }
  else
    activeGeneric.showQuickSearch( false );

  try
  {
    window.parent.g_activeGeneric = undefined;
  }
  catch( e )
  {
    g_activeGeneric = undefined;
  }
}

inputGenericSearch.processQuickSearchNavigation = function( )
{
  if( this.activeKey != undefined && this.activeKey != 38 && this.activeKey != 40 )
  {
    if( this.activeKey == 13 && this.qsIndex == -1 )
      this.showQuickSearch( false );
    else if( this.activeKey == 13 && this.qsIndex != undefined && this.qsIndex != -1 && this.divQuickSearch.childNodes[0] != undefined )
    {
      var rows = this.divQuickSearch.childNodes[0].rows;
      this.quickSearchClick.apply( rows[this.qsIndex], [] );
    }
    else if( this.activeKey == 27 ) //É o ESC? Fecha a janela.
      this.showQuickSearch( false );
    
    this.qsIndex = -1;

    return;
  }

  var rows = this.divQuickSearch.childNodes[0].tBodies[0].rows;
  
  if( this.qsIndex != undefined && this.qsIndex > -1 )
    this.unselectRow( rows[this.qsIndex] );
  
  if( this.activeKey == 38 )
  {
    if( this.qsIndex != undefined )
    {
      this.qsIndex--;
      if( this.qsIndex < 0 )
        this.qsIndex = rows.length - 1;
    }
    else
      this.qsIndex = rows.length - 1;
  }
  else
  {
    if( this.qsIndex != undefined )
    {
      this.qsIndex++;
      if( this.qsIndex >= rows.length )
        this.qsIndex = 0;
    }
    else
      this.qsIndex = 0;
  }
  
  if( this.qsIndex >= rows.length )
    this.qsIndex = 0;

  this.selectRow( rows[this.qsIndex] );
}

inputGenericSearch.txtValueOnfocus = function( )
{
  this._parent.bQuickSearchClick = false;

  this._parent.oldValue = this.value;
}

inputGenericSearch.txtValueOnblur = function( )
{
  g_activeGeneric = this._parent;
  
  setTimeout( "inputGenericSearch.delayedTxtValueOnblur.apply( g_activeGeneric, [] );", 50 );
}

inputGenericSearch.delayedTxtValueOnblur = function( )
{
  this.showQuickSearch( false );

  if( !this.bReadOnly && this.oldValue != this.txtValue.value && !this.bQuickSearchClick )
    this.updateValue( "", this.txtValue.value );
}

inputGenericSearch.txtValueOnkeydown = function( pr_event )
{
  if( !pr_event )
    pr_event = window.event;
  
  var key = pr_event.which || pr_event.keyCode;

  if( key == 9 || key == 18 )
    return;

  if( this._parent.bInsideWindow )
  {
    window.parent.g_activeGeneric           = this._parent;
    window.parent.g_activeGeneric.activeKey = key;
  }
  else
  {
    g_activeGeneric           = this._parent;
    g_activeGeneric.activeKey = key;
  }

  if( this._parent.nQuickSearchTimeout != undefined )
    clearTimeout( this._parent.nQuickSearchTimeout );

  var time;

  // Enter || ESC || Seta p/ cima || Seta p/ baixo
  if( ( key == 13 || key == 27 || key == 38 || key == 40 ) && this._parent.lastSearch == this.value )
    time = 5;
  else
    time = 1500;

  var self = this;
  this._parent.nQuickSearchTimeout = setTimeout( function( ){ self._parent.txtValueProcessKeydown( ); }, time );
}

inputGenericSearch.getQuickSearchData = function( )
{	
  var strQueryString = buildQueryString( this.aSource, false );
  var strValue       = escape          ( this.txtValue.value );
  this.lastSearch    = this.txtValue.value;

  var strPrm         = 'ID1='       + this.Id1            +
                       '&ID2='      + this.quickSearchSvc +
                       '&ID3='      + strQueryString      +
                       '&compName=' + this.internalName   +
                       '&strValue=' + strValue;

  var quickSearchData = postContent( g_strURL, strPrm );
  
  return quickSearchData;
}

inputGenericSearch.setQuickSearchData = function( pr_strQuickSearchData )
{
  if( this.divQuickSearch.childNodes[0] == undefined                ||
      this.qsIndex == undefined                                     ||
      this.qsIndex <= -1                                            ||
      this.divQuickSearch.childNodes[0].rows.length <= this.qsIndex )
  {
    var html = this.buildQuickSearchData( pr_strQuickSearchData );
    this.divQuickSearch.innerHTML = html;

    return;
  }

  var oldKey  = this.divQuickSearch.childNodes[0].rows[this.qsIndex].key;
  var oldSize = this.divQuickSearch.childNodes[0].rows.length;

  var html = this.buildQuickSearchData( pr_strQuickSearchData );
  this.divQuickSearch.innerHTML = html;
  
  if( this.divQuickSearch.childNodes[0] == undefined                ||
      this.divQuickSearch.childNodes[0].rows.length <= this.qsIndex )
    return;

  var newKey  = this.divQuickSearch.childNodes[0].rows[this.qsIndex].key;
  var newSize = this.divQuickSearch.childNodes[0].rows.length;
  
  if( oldSize == 1 && oldSize == newSize && oldKey == newKey )
    this.selectRow( this.divQuickSearch.childNodes[0].rows[0] );
}

inputGenericSearch.buildQuickSearchData = function( pr_jsonData )
{
  var str  = "<table class='quickSearch' cellspacing=0 cellpadding=0><tbody>";
  var rows = pr_jsonData.rows;
  var row;
  var cells;
  var cell;
  var bLinhaImpar = true;
  var text;
  var strHTMLValue;
  var nSubstringPos;

  for( var i = 0; i < rows.length; i++ )
  {
    row = rows[i];

    str += "<tr class='" + ( bLinhaImpar ? "alternateRow" : "row" ) + "' onmouseover='inputGenericSearch.quickSearchMouseover.apply( this, [] );' onmouseout='inputGenericSearch.quickSearchMouseout.apply( this, [] );' onmousedown='inputGenericSearch.quickSearchClick.apply( this, [] );'>";

    cells = row.cells;

    str += "<td style='display:none;'>";
    str += row.key;
    str += "</td>";

    for( var j = 0; j < cells.length; j++ )
    {
      cell = cells[j];
      text = cell.text;
      
      nSubstringPos = pr_jsonData.value.length <= text.length ? pr_jsonData.value.length : text.length;

      if( j == 0 )
        strHTMLValue = "<font style='font-weight:bold;'>" + text.substring( 0, nSubstringPos ) + "</font>" + text.substring( nSubstringPos );
      else
        strHTMLValue = text;

      str += "<td text='" + text + "' align='" + cell.align + "' style='width:" + cell.width + "px'>";
      str += strHTMLValue;
      str += "</td>";
    }

    str += "</tr>";
    
    bLinhaImpar = !bLinhaImpar;
  }

  str += "</tbody>";

  if( pr_jsonData.bMoreResults )
  {
    str += "<tfoot><tr><td colspan=2 onmousedown='inputGenericSearch.btnOpenWindowOnclick.apply( this.parentNode.parentNode.parentNode.parentNode, [event] );'>";
    str += g_bEnglish ? "More matches" : "Mais resultados";
    str += "</td></tr></tfoot>";
  }

  str += "</table>";

  return str;
}

inputGenericSearch.showQuickSearch = function( pr_bShowQuickSearch )
{
  if( this.bReadOnly )
    return;
    
  this.isQuickSearchVisible = pr_bShowQuickSearch;
  
  if( pr_bShowQuickSearch )
  {
    var position = this.calcQuickSearchPos( );
    
    this.divQuickSearch.style.left = position[0] + "px";
    this.divQuickSearch.style.top  = position[1] + "px";
    
    this.divQuickSearch.style.display = "";
  }
  else
  {
    if( this.qsIndex != undefined && this.qsIndex > -1 )
      this.unselectRow( this.divQuickSearch.childNodes[0].tBodies[0].rows[this.qsIndex] );
    
    this.divQuickSearch.style.display = "none";
  }
}

inputGenericSearch.calcQuickSearchPos = function( )
{
  var nW = 190;
  var nH = 84;

  var nX = 0;
  var nY = 0;

  var nWc = 18 + 90;
  var nHc = 21;
  
  var position = calcOffset( this.txtValue );
  var nXc      = position[0];
  var nYc      = position[1];
  var nAjuste  = calcAjuste( this.txtValue );

  var nTotH = nYc + nHc + nH;
  var nTotW = nXc + nW;

  nY = nTotH <= document.body.clientHeight ? nYc + nHc : nYc - nH;

  if( nTotH <= document.body.clientHeight || nH <= nYc )
  {
    nX = nTotW <= document.body.clientWidth ? nXc : ( nXc + nWc - nW );
    nY = nYc + nHc;
  }
  // Esse trecho de código fazia jogar o QuickSearch para cima do componente.
  // Essa condição foi movida para o IF anterior, pois este faz com que ele exiba corretamente abaixo.
  /*else if( nH <= nYc )
  {
    nX = nTotW <= document.body.clientWidth ? nXc : ( nXc + nWc - nW );
    nY = nYc - nH;
  }*/
  else if( nTotW <= document.body.clientWidth )
  {
    nX = nXc;
    nY = nYc + nHc;
  }
  else if( nTotW + nWc - nW <= nXc + nWc )
  {
    nX = nXc + nWc - nW;
    nY = nYc + nHc;
  }
  else
  {
    nX = nXc;
    nY = nYc + nHc;
  }
  
  if( this.bInsideWindow )
  {
    nX += getDialog( ).getX( );
    nY += getDialog( ).getY( ) + 26; //barra de título da tela modal
    
    if( isIE( ) || isChrome( ) )
    {
      nY += 2; //Bordas ou Sombra...
    }
  }
    
  nX += nAjuste[0];
  nY += nAjuste[1];

  return [nX, nY];
}
